services:
  nginx-gateway:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - product-service
      - order-service
      - inventory-service
      - user-service
    networks:
      - microservice-network
    restart: on-failure

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - USER_SERVICE_URL=http://user-service:8003/api/v1
      - INVENTORY_SERVICE_URL=http://inventory-service:8002/api/v1
      - ORDER_SERVICE_URL=http://order-service:8001/api/v1
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    env_file:
      - ./product-service/.env
    depends_on:
      kafka:
        condition: service_healthy
      mongodb-product:
        condition: service_healthy
    networks:
      - microservice-network
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3

  mongodb-product:
    image: mongo:5.0
    volumes:
      - mongodb_product_data:/data/db
    networks:
      - microservice-network
    environment:
      - MONGO_INITDB_DATABASE=product_db
    restart: on-failure
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - USER_SERVICE_URL=http://user-service:8003/api/v1
      - PRODUCT_SERVICE_URL=http://product-service:8000/api/v1
      - INVENTORY_SERVICE_URL=http://inventory-service:8002/api/v1
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    env_file:
      - ./order-service/.env
    depends_on:
      kafka:
        condition: service_healthy
      mongodb-order:
        condition: service_healthy
    networks:
      - microservice-network
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/health || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3

  mongodb-order:
    image: mongo:5.0
    volumes:
      - mongodb_order_data:/data/db
    networks:
      - microservice-network
    environment:
      - MONGO_INITDB_DATABASE=order_db
    restart: on-failure
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - PRODUCT_SERVICE_URL=http://product-service:8000/api/v1
      - DATABASE_URL=postgresql://postgres:postgres@postgres-inventory:5432/inventory_db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    env_file:
      - ./inventory-service/.env
    depends_on:
      kafka:
        condition: service_healthy
      postgres-inventory:
        condition: service_healthy
    networks:
      - microservice-network
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8002/health || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3

  postgres-inventory:
    image: postgres:13
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=inventory_db
    volumes:
      - postgres_inventory_data:/var/lib/postgresql/data
    networks:
      - microservice-network
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres-user:5432/user_db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    env_file:
      - ./user-service/.env
    depends_on:
      kafka:
        condition: service_healthy
      postgres-user:
        condition: service_healthy
    networks:
      - microservice-network
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8003/health || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3

  postgres-user:
    image: postgres:13
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=user_db
    volumes:
      - postgres_user_data:/var/lib/postgresql/data
    networks:
      - microservice-network
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:3.4
    container_name: automq
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_NUM_PARTITIONS=3
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
      - KAFKA_ENABLE_KRAFT=no
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - microservice-network
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_4LW_COMMANDS_WHITELIST=mntr,srvr,ruok
    networks:
      - microservice-network
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc -w 3 localhost 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

networks:
  microservice-network:
    driver: bridge

volumes:
  mongodb_product_data:
  mongodb_order_data:
  postgres_inventory_data:
  postgres_user_data:
  kafka_data:
  zookeeper_data: