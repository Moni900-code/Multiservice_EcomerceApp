#version: '3.8'

services:
  nginx-gateway:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - product-service
      - order-service
      - inventory-service
      - user-service
    networks:
      - microservice-network

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - INVENTORY_SERVICE_URL=http://inventory-service:8002/api/v1
      - KAFKA_BOOTSTRAP_SERVERS=automq:9092
    env_file:
      - ./product-service/.env
    depends_on:
      - mongodb-product
      - automq
    networks:
      - microservice-network
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 60s
      retries: 3

  mongodb-product:
    image: mongo:5.0
    volumes:
      - mongodb_product_data:/data/db
    networks:
      - microservice-network
    environment:
      - MONGO_INITDB_DATABASE=product_db
    restart: on-failure

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - USER_SERVICE_URL=http://user-service:8003/api/v1
      - PRODUCT_SERVICE_URL=http://product-service:8000/api/v1
      - INVENTORY_SERVICE_URL=http://inventory-service:8002/api/v1
    env_file:
      - ./order-service/.env
    depends_on:
      - mongodb-order
    networks:
      - microservice-network
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/health || exit 1"]
      interval: 60s
      retries: 3

  mongodb-order:
    image: mongo:5.0
    volumes:
      - mongodb_order_data:/data/db
    networks:
      - microservice-network
    environment:
      - MONGO_INITDB_DATABASE=order_db
    restart: on-failure

  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - PRODUCT_SERVICE_URL=http://product-service:8000/api/v1
      - DATABASE_URL=postgresql://postgres:postgres@postgres-inventory:5432/inventory_db
      - KAFKA_BOOTSTRAP_SERVERS=automq:9092
    env_file:
      - ./inventory-service/.env
    depends_on:
      - postgres-inventory
      - automq
    networks:
      - microservice-network
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8002/health || exit 1"]
      interval: 60s
      retries: 3

  postgres-inventory:
    image: postgres:13
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=inventory_db
    volumes:
      - postgres_inventory_data:/var/lib/postgresql/data
    networks:
      - microservice-network
    restart: on-failure

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres-user:5432/user_db
    env_file:
      - ./user-service/.env
    depends_on:
      - postgres-user
    networks:
      - microservice-network
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8003/health || exit 1"]
      interval: 60s
      retries: 3

  postgres-user:
    image: postgres:13
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=user_db
    volumes:
      - postgres_user_data:/var/lib/postgresql/data
    networks:
      - microservice-network
    restart: on-failure

  automq:
    container_name: automq
    image: automqinc/automq:latest
    ports:
      - "9092:9092"
    depends_on:
      - minio
    environment:
      BROKER_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://automq:9092
      KAFKA_PROCESS_ROLES: broker
      KAFKA_NODE_ID: 1
      KAFKA_LOG_DIRS: /data
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      AWS_S3_ENDPOINT: http://minio:9000
      AWS_S3_REGION: us-east-1
      AWS_S3_DATA_BUCKET: automq-data
      AWS_S3_OPS_BUCKET: automq-ops
    volumes:
      - automq_data:/data
    networks:
      - microservice-network
    restart: on-failure
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 60s
      retries: 3

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data
    volumes:
      - minio_data:/data
    networks:
      - microservice-network
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 60s
      retries: 3

networks:
  microservice-network:
    driver: bridge

volumes:
  mongodb_product_data:
  mongodb_order_data:
  postgres_inventory_data:
  postgres_user_data:
  minio_data:
  automq_data: